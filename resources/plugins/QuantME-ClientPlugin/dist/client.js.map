{"version":3,"file":"client.js","sources":["webpack:///webpack/bootstrap","webpack:///./client/GitHandler.js","webpack:///./client/QRMHandler.js","webpack:///./client/QuantMEClient.js","webpack:///./client/index.js","webpack:///./node_modules/camunda-modeler-plugin-helpers/index.js","webpack:///./node_modules/camunda-modeler-plugin-helpers/react.js","webpack:///./node_modules/node-fetch/browser.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./client/index.js\");\n","/**\r\n * Copyright (c) 2020 Institute for the Architecture of Application System -\r\n * University of Stuttgart\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms the Apache Software License 2.0\r\n * which is available at https://www.apache.org/licenses/LICENSE-2.0.\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport Fetch from 'node-fetch';\r\n\r\nexport default class GitHandler {\r\n\r\n  /**\r\n   * Get the URLs to all folders in the given public repository\r\n   *\r\n   * @param userName the username or organisation name the repository belongs to\r\n   * @param repoName the name of the repository\r\n   */\r\n  static async getFoldersInRepository(userName, repoName) {\r\n    const directoryURLs = [];\r\n    let response = await Fetch(`https://api.github.com/repos/${userName}/${repoName}/contents/?ref=HEAD`);\r\n    const contents = await response.json();\r\n\r\n    for (let i = 0; i < contents.length; i++) {\r\n      let item = contents[i];\r\n      if (item.type === 'dir') {\r\n        directoryURLs.push(item.url);\r\n      }\r\n    }\r\n    return directoryURLs;\r\n  }\r\n}\r\n","/**\n * Copyright (c) 2020 Institute for the Architecture of Application System -\n * University of Stuttgart\n *\n * This program and the accompanying materials are made available under the\n * terms the Apache Software License 2.0\n * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport GitHandler from './GitHandler';\n\nexport default class QRMHandler {\n\n  /**\n   * Get the currently defined QRMs form the repository\n   *\n   * @param userName the Github username to which the QRM repository belongs\n   * @param repoName the Github repository name to load the QRMs from\n   * @returns {Promise<[QRM]>} an array with the current QRMs\n   */\n  static async getCurrentQRMs(userName, repoName) {\n\n    // get all folders of the defined QRM repository which could contain a QRM\n    let folders = await GitHandler.getFoldersInRepository(userName, repoName);\n    console.log('Found %i folders with QRM candidates!', folders.length);\n\n    // filter invalid folders and retrieve QRMs\n    let QRMs = [];\n    for (let i = 0; i < folders.length; i++) {\n      let qrm = await this.getQRM(userName, repoName, folders[i]);\n      if (qrm != null) {\n        QRMs.push(qrm);\n      } else {\n        console.log('Folder %s does not contain a valid QRM!', folders[i]);\n      }\n    }\n\n    return QRMs;\n  }\n\n  /**\n   * Check whether the QRM at the given URL is valid and return it or otherwise null\n   *\n   * @param userName the Github username to which the QRM repository belongs\n   * @param repoName the Github repository name to load the QRMs from\n   * @param qrmUrl\n   * @returns {Promise<QRM>} the QRM if it is valid or null otherwise\n   */\n  static async getQRM(userName, repoName, qrmUrl) {\n\n    // TODO: check if folder contains detector and replacement fragment and download them\n    return null;\n  }\n}\n","/**\n * Copyright (c) 2020 Institute for the Architecture of Application System -\n * University of Stuttgart\n *\n * This program and the accompanying materials are made available under the\n * terms the Apache Software License 2.0\n * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Component } from 'camunda-modeler-plugin-helpers/react';\n\nimport QRMHandler from './QRMHandler';\n\n/**\n * Client plugin to retrieve the current QRMs for the replacement from a Github repository\n */\nexport default class QuantMEClient extends Component {\n\n  constructor(props) {\n\n    super(props);\n\n    props.subscribe('bpmn.modeler.created', (event) => {\n\n      const {\n        modeler\n      } = event;\n\n      // load current QRMs from defined Git repository and publish them via the event bus\n      modeler.on('QRMs.update', (event) => {\n        QRMHandler.getCurrentQRMs('UST-QuAntiL', 'QuantME-TransformationFramework')\n          .then(result => {\n            modeler._emit('QRMs.updated', { data: result });\n          });\n      });\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n","/**\r\n * Copyright (c) 2020 Institute for the Architecture of Application System -\r\n * University of Stuttgart\r\n *\r\n * This program and the accompanying materials are made available under the\r\n * terms the Apache Software License 2.0\r\n * which is available at https://www.apache.org/licenses/LICENSE-2.0.\r\n *\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { registerClientExtension } from 'camunda-modeler-plugin-helpers';\r\n\r\nimport QuantMEClient from './QuantMEClient';\r\n\r\nregisterClientExtension(QuantMEClient);\r\n","/**\n * Validate and register a client plugin.\n *\n * @param {Object} plugin\n * @param {String} type\n */\nexport function registerClientPlugin(plugin, type) {\n  var plugins = window.plugins || [];\n  window.plugins = plugins;\n\n  if (!plugin) {\n    throw new Error('plugin not specified');\n  }\n\n  if (!type) {\n    throw new Error('type not specified');\n  }\n\n  plugins.push({\n    plugin: plugin,\n    type: type\n  });\n}\n\n/**\n * Validate and register a client plugin.\n *\n * @param {import('react').ComponentType} extension\n *\n * @example\n *\n * import MyExtensionComponent from './MyExtensionComponent';\n *\n * registerClientExtension(MyExtensionComponent);\n */\nexport function registerClientExtension(component) {\n  registerClientPlugin(component, 'client');\n}\n\n/**\n * Validate and register a bpmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerBpmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const BpmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerBpmnJSPlugin(BpmnJSModule);\n */\nexport function registerBpmnJSPlugin(module) {\n  registerClientPlugin(module, 'bpmn.modeler.additionalModules');\n}\n\n/**\n * Validate and register a bpmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerBpmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerBpmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerBpmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'bpmn.modeler.moddleExtension');\n}\n\n/**\n * Return the modeler directory, as a string.\n *\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\n *\n * @return {String}\n */\nexport function getModelerDirectory() {\n  return window.getModelerDirectory();\n}\n\n/**\n * Return the modeler plugin directory, as a string.\n *\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\n *\n * @return {String}\n */\nexport function getPluginsDirectory() {\n  return window.getPluginsDirectory();\n}","if (!window.react) {\n  throw new Error('Not compatible with Camunda Modeler < 3.4');\n}\n\n/**\n * React object used by Camunda Modeler. Use it to create UI extension.\n *\n * @type {import('react')}\n */\nmodule.exports = window.react;","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nexports.default = global.fetch.bind(global);\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAWA;AAEA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AArBA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;;;;;;;;;;AAWA;AAEA;AAEA;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAQA;AAEA;AACA;AACA;AACA;AA1CA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAWA;AAEA;AAEA;;;;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AADA;AACA;AAIA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;;;;;;;;;;AAWA;AAEA;AAEA;;;;;;;;;;;;ACfzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}